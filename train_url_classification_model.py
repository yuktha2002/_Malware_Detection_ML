import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import pickle

# Define the sanitization function
def sanitization(web):
    web = web.lower()
    token = []
    dot_token_slash = []
    raw_slash = web.split('/')
    for part in raw_slash:
        raw1 = part.split('-')
        for element in raw1:
            raw2 = element.split('.')
            token.extend(raw2)
        dot_token_slash.extend(raw1)
    token = list(set(dot_token_slash))
    if 'com' in token:
        token.remove('com')
    return token

# Load the pre-trained vectorizer
with open('Classifier/pickel_vector.pkl', 'rb') as vectorizer_file:
    vectorizer = pickle.load(vectorizer_file)

# Load the dataset
url = './Dataset/data_url.csv'  # Replace with your data file path
url_df = pd.read_csv(url)

# Shuffle the data
url_df = url_df.sample(frac=1).reset_index(drop=True)

# Separate the data according to its characteristics
y = url_df.iloc[:, 1]  # Target variable (labels)
urls = url_df.iloc[:, 0]  # URLs

# Vectorize the data using the pre-trained vectorizer
x = vectorizer.transform(urls)

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Train the Logistic Regression model
model = LogisticRegression(solver='lbfgs', max_iter=1000)
model.fit(x_train, y_train)

# Evaluate the model on the testing set
score = model.score(x_test, y_test)
print(f"Model accuracy: {score * 100:.2f}%")

# Save the model using pickle
with open('Classifier/pickel_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

print("Model saved successfully.")

from flask import Flask, request, render_template
import pickle
import os
from sklearn.feature_extraction.text import TfidfVectorizer

# Initialize the Flask app
app = Flask(__name__)

def sanitization(web):
    web = web.lower()
    token = []
    dot_token_slash = web.split('/')
    for part in dot_token_slash:
        part_tokens = part.split('-')
        for token_part in part_tokens:
            token.extend(token_part.split('.'))
    token = list(set(token))
    if 'com' in token:
        token.remove('com')
    if 'org' in token:
        token.remove('org')
    return token

# Define a whitelist of known legitimate websites
whitelist = [
    "google.com",
    "facebook.com",
    "twitter.com",
    "linkedin.com",
    "youtube.com",
    "amazon.com",
    "wikipedia.org",
    "reddit.com",
    "microsoft.com",
    "apple.com",
    "github.com",
    "netflix.com",
    "instagram.com",
    "bbc.com",
    "cnn.com",
    "espn.com",
    "nytimes.com",
    "theguardian.com",
    "aljazeera.com",
    "npr.org",
    "samsung.com",
    "cafecoffeeday.org",
    "cafecoffeeday.com",
    "stackoverflow.com",
    "ebay.com",
    "wordpress.com",
    "imdb.com",
    "paypal.com",
    "aliexpress.com",
    "spotify.com",
    "booking.com",
    "tripadvisor.com",
    "etsy.com",
    "target.com",
    "homedepot.com",
    "lowes.com",
    "bestbuy.com",
    "walmart.com",
    "dell.com",
    "ups.com",
    "fedex.com",
    "usps.com",
    "irs.gov",
    "whitehouse.gov",
    "un.org",
    "oracle.com",
    "ibm.com",
    "cisco.com",
    "adobe.com",
    "salesforce.com",
    "vmware.com",
    "intel.com",
    "hp.com",
    "accenture.com",
    "deloitte.com",
    "ey.com",
    "pwc.com",
    "mckinsey.com",
    "gartner.com",
    "forrester.com",
    "bloomberg.com",
    "wsj.com",
    "ft.com",
    "economist.com",
    "cnbc.com",
    "bloomberg.com",
    "techcrunch.com",
    "thenextweb.com",
    "engadget.com",
    "arstechnica.com",
    "nationalgeographic.com",
    "weather.com",
    "bbc.co.uk",
    "theguardian.co.uk",
    "telegraph.co.uk",
    "bbc.co.in",
    "timesofindia.indiatimes.com",
    "thehindu.com",
    "ndtv.com",
    "reuters.com",
    "abc.net.au",
    "smh.com.au",
    "cbc.ca",
    "ctvnews.ca",
    "bbc.ca",
    "theglobeandmail.com",
    "google.co.uk",
    "google.co.in",
    "google.ca",
    "google.com.au",
    "google.de",
    "google.fr",
    "google.co.jp"
]

# Load the pre-trained model and vectorizer
def load_model_and_vectorizer():
    model_path = os.path.join('Classifier', 'pickel_model.pkl')
    vectorizer_path = os.path.join('Classifier', 'pickel_vector.pkl')
    
    with open(model_path, 'rb') as model_file:
        lgr = pickle.load(model_file)
        
    with open(vectorizer_path, 'rb') as vectorizer_file:
        vectorizer = pickle.load(vectorizer_file)
    
    return lgr, vectorizer

# Define the function to check the URL
def check_url(url):
    # Convert the URL to lowercase
    url = url.lower()
    
    # Check if the URL is in the whitelist
    if any(known_url in url for known_url in whitelist):
        return "The URL is legitimate."
    
    # Load model and vectorizer
    lgr, vectorizer = load_model_and_vectorizer()
    
    # Vectorize the URL
    x = vectorizer.transform([url])
    
    # Predict whether the URL is malicious or legitimate
    y_predict = lgr.predict(x)
    
    # Interpret the prediction result
    if y_predict[0] == 1:
        return "The URL is legitimate."
    else:
        return "The URL is malicious."

# Define the route for URL detection
@app.route('/check_url', methods=['POST'])
def check_url_route():
    url = request.form.get('url')

    # Check if a URL was provided
    if not url:
        return render_template('index2.html', result="Error: Please enter a URL.")
    
    # Get the prediction result for the URL
    result = check_url(url)
    return render_template('index2.html', result=result)

# Define the main route for the home page
@app.route('/')
def home():
    return render_template('index2.html')
if __name__ == '__main__':
    app.run(debug=True)

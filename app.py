from flask import Flask, request, render_template
import joblib
import pickle
import os
from Extract.PE_main import extract_infos
from pefile import PEFormatError

app = Flask(__name__)

# Load pre-trained classifier and features
classifier = joblib.load(os.path.join('Classifier', 'classifier.pkl'))
with open(os.path.join('Classifier', 'features.pkl'), 'rb') as f:
    features = pickle.load(f)

def is_valid_pe_file(file_path):
    # List of allowed file extensions for PE files
    allowed_extensions = ['.exe', '.dll', '.sys', '.drv']
    file_extension = os.path.splitext(file_path)[1].lower()
    
    # Check if the file has a valid PE file extension
    return file_extension in allowed_extensions

# Define the function to predict whether the file is malicious or legitimate
def predict(file_path):
    # Verify the file extension is a valid PE file type
    if not is_valid_pe_file(file_path):
        return f"Error: The file '{file_path}' is not a valid PE file type. Please provide a valid PE file (e.g., .exe, .dll)."
    
    try:
        # Extract features from the file
        data = extract_infos(file_path)
        
        # Handle the case where `data` is None
        if data is None:
            return f"Error: Unable to extract features from the file '{file_path}'. The file may be corrupt or unreadable."
        
        # Match the extracted features with the saved feature list
        pe_features = [data.get(feature, 0) for feature in features]
        
        # Handle the case where the extracted features are empty or invalid
        if not pe_features:
            return f"Error: Unable to extract valid features from the file '{file_path}'. Please provide a valid PE file."
        
        # Use the classifier to make a prediction
        prediction = classifier.predict([pe_features])[0]
        
        # Interpret prediction
        if prediction == 0:
            return f"The file '{file_path}' is malicious."
        else:
            return f"The file '{file_path}' is legitimate."
        
    except PEFormatError:
        # Handle PEFormatError (e.g., file is not a valid PE file)
        return f"Error: The file '{file_path}' is not a valid PE file. Please provide a valid PE file."
    
    except FileNotFoundError:
        # Handle FileNotFoundError
        return f"Error: File '{file_path}' not found. Please provide a valid file path."
    
    except Exception as e:
        # Handle any other unexpected exceptions
        return f"Error: An unexpected error occurred while processing the file '{file_path}'. Error: {str(e)}"

# Define the main route
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        file_path = request.form.get('file_path')

        # Check if a file path was provided
        if not file_path:
            return render_template('index.html', result="Error: Please enter a file path.")
        
        # Get the prediction result
        result = predict(file_path)
        return render_template('index.html', result=result)
    
    # Render the form when no form submission has been made (GET request)
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
